steps:
  #Traverse each subdirectory or use find to locate additional cloudbuild.yaml files.
  #For each found cloudbuild.yaml, fork and submit a build by running gcloud builds submit.
  #Wait for all the forked gcloud commands to complete.
  #build and push protoc to GCR
  #required by protoc-gen-go
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      for d in */; do
        config="${d}cloudbuild.yaml"
        if [[ ! -f "${config}" ]]; then
          continue
        fi

        echo "Building $d ... "
        (
          gcloud builds submit $d --config=${config}
        ) &
      done
      wait

  #build protoc image and push to GCR so Cloud Build can use it
  - name: 'gcr.io/cloud-builders/docker'
    args:
    - go
    - get
    - -u
    - github.com/golang/protobuf/protoc-gen-go

  #download protoc-gen-go
  - name: golang:1.12
    args:
    - go
    - get
    - -u
    - github.com/golang/protobuf/protoc-gen-go

  #generate grpc go protobufs
  - name: gcr.io/${PROJECT_ID}/protoc
    args:
    - --proto_path=src/emoji/protos
    - --plugin=protoc-gen-go=/go/bin/protoc-gen-go
    - --go_out=plugins=grpc:/go/src
    - ./src/emoji/protos/emoji.proto
  
  #build the Docker image
  - name: gcr.io/cloud-builders/docker
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/grpc-web-server:${SHORT_SHA}', '.']

#push image to GCR
images: ['gcr.io/$PROJECT_ID/grpc-web-server']

options:
  #set env vars
  env:
  - GO111MODULE=on
  - GOPROXY=https://proxy.golang.org
  volumes:
  - name: go-modules
    path: /go